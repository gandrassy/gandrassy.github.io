10. hét (jan 14-től)


Optional
========

Egy olyan objektum, amely tartalmazhat egy másik objektumot.
A nullpointer exceptionok kivédésére való. 

Import java.utils.Optional;

Allat maci = new Allat("Buci");

Optional<Allat> allatOptional = Optional.of(maci);      // macit betesszük az optionalba. Muszáj, hogy amit beteszünk, az ne null értékű legyen, 
                                                        // mert különben már ez a sor nullPointerExceptiont dob

allatOptional = Optional.empty();                      // macit kiveszem az optionalból

if (allatOptional.isPresent()) {                        // ha benne van a maci, kiírja. ha nincs benne semmi, nem fut le
  System.out.println(animalOptional.get().toString());  // notSuchsElementExpressiont adna, ha az optional empty
}


Létezik olyan optional hogy .ofNullable() ami tartalmazhat null-t is. Ez esetben megadható egy default érték:

allatOptional.orElse(maci)     // ha null értékű az optional, akkor macit ad vissza.


példa:

List<Allat> allatok = new Arraylist<>();
allatok.add("Lama",1934,"him");
allatok.add("Alpakka",1963,"him");
allatok.add("Oszver",1977,"nosteny");
allatok.add("Pinto",1982,"nosteny");


public static Optional<Allat> elsoOregAllat(List<Animal> animals) {
  LocalDateTime now = LocalDateTime.now();
  int mostaniEv = now.getYear();
  for (Animal animal : animals) {
    int eletkora = mostaniEv - allat.getBirthYear();
    if (eletkora > 40) return Optional.of(animal); 
  }
  return Optional.empty();
}

System.out.println( elsoOregAllat(allatok).orElse(null) );



Lambda expression ->
====================

Használható a kód rövidítésére is, de nem csak erre jó: lehetőséget ad a funkcionális programozásra.

---

package lambda;

public interface MorogniKepes {

  public void morog();

}

---

package lambda;

public class Program {

  public void megmorgat(MorogniKepes a) {    // egy olyan objektumot vár paraméterként, amelyik implementálja ezt az interface-t,
    a.morog();                               // és amikor megkapta, akkor megmorgatja
  }

  public void main(Srting[] args) {
    
    //klasszikus objektumorientált programozásban csinálni kell egy Kutya classt, ami implementálja az interfészt
    
    Kutya buksi = new Kutya();
    megmorgat(buksi); 

    // de ha nem akarok csak ezért egy kutya osztályt csinálni, akkor jön a lambda:

    MorogniKepes morog = (int hossz) -> {        //betesszük a kódot egy változóba, aminek a típusa az interface neve
      System.out.print("gr");
      for (int i=0; i<hossz; i++) System.out.print("r");
      System.out.println("");
    };                                           // return érték is megadható!
    megmorgat(morog(3));                         //és megmorgatható a nélkül, hogy csináltunk volna egy kutyát hozzá!

  }

}



A lambda kifejezések használata új objektumokat hoz létre. Ha a lambda kontextusfüggő, akkor
mindenképpen, hogyha nem kontextus függő, akkor elvileg a javagép escape analisys által 
újrahasznosítja, de ez még nem ellenőrzött, hogy mennyire működőképes.




