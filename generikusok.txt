Generikusok
===========

A generikusok használhatók osztályokban, interfészkekben és metódusokban. 
Előnyük, hogy ugyanaz a kód használható többféle típusra is.


Naming convention:
------------------
  E - element  (java collections framework)
  K - key
  N - number
  T - type
  V - value
  S,U,V stb - továbby type


Megjegyzendő, hogy a generikusok egy absztrakció, fordításkor a java compiler ezeket 
a bounded típusukkal (vagy ha nincs, akkor az Objecttel) helyettesíti be, és hozzáadja
a kódhoz a szükséges átkasztolásokat stb. A bytecode már nem tartalmaz olyat, hogy generikus.
Ez a folyamat a Type Erasure.


Generikus osztályok
===================

Persze, a különböző típusok tárolása megoldható volna az ősosztályba kasztolással is:

public class EnOsztalyom {
  private Object obj;
  public void setObj(Object obj) { this.obj = obj; }
  public Object getObj() { return this.obj; }
}

Ebben a kódban is bármit tárolhatunk, de a bármit Object-ként adja vissza, és át kell kasztolnunk
az eredeti típusára tovább használat előtt. Ha ugyan tudjuk, mi az. 


ugyanaz generikussal:

public class EnOsztalyom<T> {
  private T t;
  public void set(T t) { this.t = t; }
  public T getObj() { return this.t; }
}

T bármilyen referencia típus lehet, és visszaadáskor a saját típusában kapjuk meg, nem kell 
átkasztolni.


Gyakorlati példa: ArrayList<String> lista = new ArrayList<String>();

Ennek a get metódusa mindig stringet ad vissza. (Vagy aminek deklaráltzuk.)


A java SE7 óta a második típus elhagyható: ArrayList<String> lista = new ArrayList<>();
A compiler automatikusan behelyettesíti a környezet alapján. 
Ezt az üres <>-t nevezzük diamond operátornak.


Raw type using:
---------------

EnOsztalyom rawOsztaly = new EnOsztalyom();

Ez esetben a a visszatérési érték Object, át kell kasztolni.


Bounded type:
-------------

A generikusok használata leszűkíthető egy típuscsaládra is, pl:

<T extends Number>

Ez esetben hívhatunk a generikuson csak az adott objektum-családra jellemző metódusokat is.


Többszörös bound is lehetséges:

<T extends Float & Double>


Megjegyzendő, hogy a generikusok hiearchiáját nem veszi át a class, tehát míg a Number típus
magába foglalhat egy Integer típust, addig az enOsztalyom<Number> típustnak nem lehet átadni
egy enOsztalyom<Integer> típust.
(Viszont ha enMasodikOsztlyom extends enOsztalyom, akkor enOsztalyom<Number> típus magába
foglalhatja enMasodikOsztalyom<Number> típust.)

a probléma wildcard-dal hidalható át:
           --------
enOsztalyom<? extends Number> az már felveheti enOsztalyom<Integer> értékét. (upper bounded)

fordítva is működik, ha van egy ismeretlen típusom, ami az Integer felett áll a hiearchiában:

enOsztalyom<? super Integer> is felveheti enOsztalyom<Integer> értékét. (lower bounded)


wildarcok használatánál bizonyos esetekben előfordulhat fordítási hiba, ekkor helper metódusokat
csinálnak, erről bővebben itt: https://docs.oracle.com/javase/tutorial/java/generics/capture.html



Generikus metódusok
===================

public static <T extends Comparable<T>> int hanyElemNagyobbMint(T[] tomb, T hatarertek) {
   int szamlalo = 0;
   for (T elem : tomb) {
      if ( hatarertek.compareTo(elem) < 0 )
         ++szamlalo;
   }
   return szamlalo;
}
      

A metódust elvileg így kellene hívni:

valtozo = enOsztalyom.<Integer>hanyElemNagyobbMint(IntegerTomb, Integer.valueOf(20));

de a java compiler az átadott adatokból ki tudja egészíteni a deklarációt (type inference),
ezért így is lefordul:

valtozo = enOsztalyom.hanyElemNagyobbMint(IntegerTomb, Integer.valueOf(20));



