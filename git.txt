A git használata
================

letölthető innen: https://git-scm.com/
dokumentációja:   https://git-scm.com/docs/

komponensei: - windows explorer integráció
             - git BASH (egy linux jellegű parancssoros felület)
             - git GUI (grafikus felület)
             - LFS (large file support)

telepítés után be kell jelentkezni: git config--global user.email "andrassy@mensa.hu"
                                    git config--global user.name  "Andrássy Gábor"

egy meglévő repository klónozása saját gépre: git clone https://github.com... stb.
(ezt a parancsot a repository számára nyitott könyvtárból adjuk ki)

a file-ok különböző állapotai:
  - untracked  (ez az alapállapot, ki kell jelölni mentendőnek)
  - staged     (a fileok mentésre előkészítve)
  - unmodified (a commitolt file-ok állapota mindaddig, amíg hozzájuk nem szerkesztenek)
  - modified   (mentéshez ismét stageddé kell tenni)

gyakorlatban:

az összes file kijelölése mentésre:  git add .
az előkészített file-ok mentése:     git commit -m "this is the very first version of mine"
a file-ok állapotának lekérdezése:   git status ("working tree clean" válasz azt jelenti, sikeres)

a felesleges commitok eltávolíthatóak a git rebase paranccsal


Szinkronizálás a távoli repositoryval
-------------------------------------

megnézi, hogy az adott repositoryban mely file-okon dolgoznak mások: git fetch
ez a local repot nem módosítja, csak a git checkout parancsal lehet megnézni,
mi változna, ha lefrissítenéd a local repot, és a git merge parancsal összefésülni.

a local repo frissítése:        git pull (ezt minden push előtt elindítani!)

saját módosítások feltöltése:   git push


code review
-----------

1. a központi repót forkolom, és klónozom a saját gépemre

2. csinálok egy új branchet annak, amit hozzáfejlesztenék:

     git checkout -b some-feature

     [elkészítem a kódot]

     git commit -a -m "Add first draft of some feature"

3. amikor kész, feltöltöm a saját github repository-mba:

     git push origin some-branch

4. a githubon a saját forked repóból csinálok egy pull requestet

     a source branch az a saját branchem, a some-feature,
     a destination branch a a senior develpoer saját repójában a main

5. a senior beletenyerel a merge gombba, és ezzel bekerül a fősodorba.

bővebben: https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud


félbehagyott munkák (stashelés)
-------------------------------

Ha valamit egy fontosabb munka miatt félbe kell hagyni, lehetőség van a félkész fejlesztést
elmenteni, és később visszatérni a módosítások előtti állapotba. A mentés parancsa:

     git stash -m "some feature the procedure x still fails the test"

Visszatérés az félbehagyott munkához:

     git stash pop

...ez a parancs egyben törli is az utolsó szteshelt állapotot.


A parancs többször is kiadható, mert minden elszteshelt változatot egy számindexel lát el.
Ezek így listázhatók:

     git stash list

Hogy mi van egy-egy stash-ban, meg is nézhető:

     git stash show stash@{1}

Elővenni meg így lehet:

     git stash apply stash@{1}

Egy állapot törlése:

     git stash drop stash@{1}

Az összes állapot törlése:

     git stash clear

