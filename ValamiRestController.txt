package com.hackerrank.gevents.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.hackerrank.gevents.model.Event;
import com.hackerrank.gevents.repository.EventRepository;

@RestController
public class ValamiRestController {

    @Autowired
    private EventRepository eventRepository;

    // kap egy body-ban, ID nélkül beküldött eventet, ha a típusa nem az adott három egyike, akkor 400-as kóddal tér vissza,
    // ha valid, akkor beküldi a repóba, ott az ID-jét kitölti, és a body-ban visszaküldi 201-es kóddal
	@PostMapping("/events")
	public ResponseEntity<Event> AddNew(@RequestBody Event event) {
		switch (event.getType()) {
		case "PushEvent":
		case "ReleaseEvent":
		case "WatchEvent":
			break;
		default:
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid type");
		}
		event = eventRepository.save(event);
		return new ResponseEntity<Event>(event, HttpStatus.CREATED);
	}

    //mindent listáz
	@GetMapping("/events")
	public List<Event> gimmeAll() {
		return eventRepository.findAllByOrderById();
	}
	
    //userId alapján keres, és visszaad egy kollekciót 200-as kóddal    
	@GetMapping("/users/{userId}/events")
	public List<Event> gimmeByUser(@PathVariable Integer userId) {
		return eventRepository.findAllByActorIdOrderById(userId);
	}

    // url paraméterrel meghvott végpont: localhost:8080/userevents?user=231
    @GetMapping("/usersevents")
	public List<Event> gimmeByUser(@RequestParam(required = false, defaultValue = null, value="user") Integer userId) {
        if (userId == null) {
           throw new ResponseStatusException(HttpStatus.NOT_ACCEPTABLE, "no user set");
        }
		return eventRepository.findAllByActorIdOrderById(userId);
	}
    
    //ha van event, 200-al visszaadja, ha nincsen, akkor 404 nem található	
	@GetMapping("/events/{eventId}")
	public Event getById(@PathVariable Integer eventId) {
		Event e = eventRepository.findEventById(eventId);
		if (e == null) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "entity not found");
		}
		return e;
	}
	
}
