Aszinkron hívás a Spring frameworkben
=====================================

Hosszadalmas eljárásoknál használjuk, hogy közben az user csinálhasson valami mást.

Ha a meghívott metódus aszinkronnak van annotálva, akkor a vezérlés visszakerül a benne lévő kód végrehajtása előtt
a programtörzsbe, és egy másik szálon hajtja végre. 


Pl:

    @GetMapping("/createTasks")
    public ResponseEntity<String> gimmeByRepo(@PathVariable Integer repoId) {
        tasksService.createTasks()
        return new ResponseEntity<String>("Process startet.", HttpStatus.PROCESSING);
    }
    
    @Async
    public void createTasks() {
        //creating tasks
    }
    
    
    
Előfordulhat, hogy az aszinkron metódus végrehajtása után egy másik metódust kell majd meghívni. Ez akár lehet konfigurálható
is oly módon, hogy a metódust paraméterként adjuk át:


    @GetMapping("/createTasksAndEmailToMeWhenDone")
    public ResponseEntity<String> gimmeByRepo(@PathVariable Integer repoId) {
        tasksService.createTasks(messageService::sendEmail);
        return new ResponseEntity<String>("Process startet.", HttpStatus.PROCESSING);
    }
    
    @GetMapping("/createTasksAndSMSToMewhenDone")
    public ResponseEntity<String> gimmeByRepo(@PathVariable Integer repoId) {
        tasksService.createTasks(messageService::sendSMS);
        return new ResponseEntity<String>("Process startet.", HttpStatus.PROCESSING);
    }
    
    @Async
    public void createTasks(Consumer<String> callback) {
        //creating tasks
        String message = "Task creation completed."
        //fill message
        callback.accept(message);                          
    }
 
 
    public void sendEmail(String message) {
        //send the string in email.
    }
    
    public void sendSMS(String message) {
        //send the string in sms message.
    }