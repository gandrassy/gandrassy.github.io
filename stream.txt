Java Stream API
===============

Kollekciók (listák, tömbök stb) menedzselésére való.

static class Ruha {
  String szin;
  int meret;
}

List<Ruha> ruhak new Arraylist<>();
ruhak.add("piros",40);
ruhak.add("zold",42);
ruhak.add("piros",40);
ruhak.add("fehér",42);
ruhak.add("fehér",40);

ruhak.stream() .forEach(                   // minden elemére meghívunk...
  ruha -> System.out.println(ruha)         // egy lambda konverziót, ami kiír mindent
);

ruhak.stream()
     .filter(ruha -> ruha.getMeret()==40)   // ez egy új stream, amelyben csak a 40-es méretű ruhák lesznek benne
     .forEach(ruha -> System.out.println(ruha) ); 

így is meghívható:
     .forEach(System.out::println);



a predikátum átadható paraméterként is, így a kódrészlet kiemelhető egy függvénybe:

public static void szures(List<Ruha>, Predicate<Ruha> p) {
 ruhak.stream()
   .filter(p)
   .forEach(System.out::println);
 }

és akkor a mainba már csak annyit kell írni:

szures(ruhak, ruha -> ruha.getMeret() == 40);
szures(ruhak, ruha -> ruha.getSzin().equals("fehér") );


A predikátumok el is menthetőek:

Predicate<Ruha> negyvenes = ruha -> ruha.getMeret() == 40;


összes fehér ruha méretének növelése eggyel:

ruhak.stream()
  .filter(ruha -> ruha.getSzin.equals("fehér"))
  .forEach( ruha -> ruha.setMeret(ruha.getMeret++)); 

A filter memóriacím szerint ad át, így tehát a filterezett streamon készített változások megjelennek az ősben is.


Ha ki akarjuk írni, milyen színű 40-es ruháink vannak, akkor:

ruhak.stream()
  .filter(negyvenes)
  .map( ruha -> ruha.getSzin() )    // írható úgy is, hogy .map(Ruha::getSzin), csinál egy új streamot ami a színeket tartalmazza
  .forEach(System.out::println);    // kiírja a .map tartalmát


másik példa:

Set<String> negyvenkettesSzinek = new HashSet<>();

for (var ruha: ruhak) {
  if (ruha.getMeret()==42) {
    negyvenkettesSzinek.add(ruha.getszin());
  }
}
System.out.println(negybenkettesSzinek);

A fenti példában bizonyos színek többször is bekerülhetnek a kollekcióba.

Set<String> negyvenkettesSzinekStream = ruhak.stream()
  .filter(ruha -> ruha.getMeret()==42)
  .map(Ruha::getSzin)
  .collect(Collectors.toSet());

System.out.println(negybenkettesSzinekStream);

collect(Collectors.toSet()) egy halmazba rak be. A halmazban minden csak egyszer szerepelhet.
collect(Collectors.toList()) egy listába tesz be.

az átlagosnál kisebb ruhák:

long darab = ruhak.stream().count();  // megmondja a streamnek hány eleme van

int osszeg = ruhak.stream()
  .map(Ruha::getMeret())                      // az összes ruha mérete egy streambe kerül
  .reduce(0, (akku, elem) -> akku+elem);      // az accumullator kezdetben nulla, ehhez hozzáadja az első elemet,
                                              // aztán ehhez az összeghez hozzáadja a következő elemet stb. "gurul" végig

a kétvátozós így is felírható: .reduce(0,Integer::sum);

maga a kifejezés pedig így is:

int osszeg = ruhak.stream()
  .mapToInt(Ruha::getMeret())   // a ruhak.streamet alakítsd át int-é a getMeret() fv-vel, 
  .sum();                       // int streamen már van összeadás fv.


double atlag = (double)osszeg / darab;

List<Ruha> kisruhak = ruhak.stream()
  .filter( ruha -> ruha.getMeret() < atlag)
  .collect(Collectors.toList());


Az első piros ruha kiírása:

Optional<Ruha> elsoPiros = ruhak.stream()
  .filter(ruha -> ruha.getSzin().equals("piros"))
  .findFirst();

if (elsoPiros.isEmpty()) {
  sout("nincs piros");
} else {
  sout("az első piros:" + elsoPiros.get() );
}

if helyett így is megvalósítható:

String eredmény = elsoPiros.map( ruha -> "Az első piros:" + ruha)     // ha visszajött egy ruha, akkor abból kiveszi a színt
  .orElse("nincs piros ruha");                                        //ez alakítja az Optional<String> típust Stringgé.
 

--- krisztián féle agyolvasztó ---

köztes operátor
  .filter    // kiszűri azt, amire a preikátum igaz
  .distinct  // csak az object.equals() szerint nem azonos elemeket tartja meg
  .map       // átalakít egy másik adatszerkezetté

terminális operátor


Vector - ugyanolyan mint egy ArrayList, csak a vector átadható egy több szálon futó metódusnak, és threadsafe, egyszerre többfelől is abajgatható

joiner:

String nevek = allatok.stream()
  .map(animal::getName)             // kimappelem csak a neveket
  .collect(Collectors.joining());   // összefűzi a három nevet

vagy

  .collect(Collectors.joining(" "));           // összefűzi szóközzel
  .collect(Collectors.joining("," , "(" , ")"));   // limiter, prefix, suffix

továbbiak a collectorokról:
https://www.baeldung.com/java-8-collectors


paralel stream
--------------

akkor használjuk, ha többezer adatot kell kezelni.

String nevek = allatok.stream()
  .parallel()                       // szétosztja a streamet multiprocessz környezetbe
  .map(animal::getName)             // kimappelem csak a neveket
  .collect(Collectors.joining());   // összefűzi a három nevet
  
  
  
gyakran használt streamek:
--------------------------


List<Allat> allatok;


Az objektumok felmapelése id szerint:

Map<Integer, Allat> allatById = allatok.stream().collect(Collectors.toMap(Allat::getId, Function.identity()));


Az objektumok egy fieldjének felmapelése:

Map<Integer, String> allatById = allatok.stream().collect(Collectors.toMap(Allat::getId, Allat::getName));


az objektumok Id-inek kigyűjtése egy setbe:

Set<Integer> ids = a.stream().map(Allat::getId).collect(Collectors.toSet());


Az azonos fajú állatok mapolása fajok szerint:

Map<String, List<Allat>> egyedek = allatok.stream().collect(Collectors.groupingBy(Allat::getSpecy));


Feltételnek való megfelelés ellenőrzése az egész kollekcióra:

boolean isWolfThere = c.stream().anyMatch( allat -> { return e.getSpecy().equals("farkas");  }  );
boolean isNoAnyWolfThere = c.stream().noneMatch( allat -> { return e.getSpecy().equals("farkas");  }  );


megszámolja, hány állatunk van:

int allatszam = allatok.stream().distinct().count();